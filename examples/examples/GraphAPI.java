package examples;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class GraphAPI {
    public static final String API_URL = "http://localhost:8000/api/"; // TODO: to be generated by application on download
    public static final String VERTEX_API_URL = API_URL + "vertices/";
    public static final String EDGE_API_URL = API_URL + "edges/";
    public static final String TOKEN = ""; // TODO

    private static GraphAPI instance;
    private final Lock lock = new ReentrantLock(); // For synchronization

    // Private constructor to prevent direct instantiation
    private GraphAPI() {
    }

    // Singleton instance creation
    public static GraphAPI getInstance() {
        if (instance == null) {
            synchronized (GraphAPI.class) {
                if (instance == null) {
                    instance = new GraphAPI();
                }
            }
        }
        return instance;
    }

    // Basic REST methods (you can customize these)
    public String get() {
        // Implement your GET logic here
        return "GET response for " + API_URL;
    }

    public String postVertex(Object name) {
        try {
            URL apiUrl = new URL(VERTEX_API_URL);
            HttpURLConnection connection = (HttpURLConnection) apiUrl.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setDoOutput(true);

            String requestBody = String.format("{ \"name\": \"%s\" }", name);

            // Write request body
            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = requestBody.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            // Read response
            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(connection.getInputStream(), "utf-8"))) {
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                return response.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "Error: " + e.getMessage();
        }
    }

    public String postEdge(Object source, Object target) {
        return postEdge(source, target, "");
    }

    public String postEdge(Object source, Object target, Object description) {
        try {
            URL apiUrl = new URL(EDGE_API_URL);
            HttpURLConnection connection = (HttpURLConnection) apiUrl.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setDoOutput(true);

            String requestBody = String.format(
                "{ \"source\": \"%s\", \"target\": \"%s\", \"description\": \"%s\" }",
                source, target, description);

            // Write request body
            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = requestBody.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            // Read response
            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(connection.getInputStream(), "utf-8"))) {
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                return response.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "Error: " + e.getMessage();
        }
    }

    // Other methods for handling REST requests go here
    // ...
}
